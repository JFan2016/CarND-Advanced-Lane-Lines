* Writeup

*** DONE Provide a Writeup / README

*** TODO Include all the rubric points and how you addressed each one.

*** DONE Include a statement and supporting figures / images that explain how each rubric item was addressed, and specifically where in the code each step was handled.

* Camera Calibration

*** TODO Briefly state how you computed the camera matrix and distortion coefficients. Provide an example of a distortion corrected calibration image.

* Pipeline (test images)

*** DONE Provide an example of a distortion-corrected image.

*** DONE Describe how (and identify where in your code) you used color transforms, gradients or other methods to create a thresholded binary image. Provide an example of a binary image result.

*** DONE Describe how (and identify where in your code) you performed a perspective transform and provide an example of a transformed image.

*** DONE Describe how (and identify where in your code) you identified lane-line pixels and fit their positions with a polynomial?

*** DONE Describe how (and identify where in your code) you calculated the radius of curvature of the lane and the position of the vehicle with respect to center.

*** DONE Provide an example image of your result plotted back down onto the road such that the lane area is identified clearly.

* Pipeline (video)

*** DONE Provide a link to your final video output. Your pipeline should perform reasonably well on the entire project video (wobbly lines are ok but no catastrophic failures that would cause the car to drive off the road!)

* Discussion

*** TODO Briefly discuss any problems / issues you faced in your implementation of this project. Where will your pipeline likely fail? What could you do to make it more robust?

* Suggestions to Make Your Project Stand Out!

*** DONE For a standout submission, students should follow the suggestion in the lesson to not just search blindly for the lane lines in each frame of video, but rather, once they have a high-confidence detection, use that to inform the search for the position of the lines in subsequent frames of video. For example, if a polynomial fit was found to be robust in the previous frame, then rather than search the entire next frame for the lines, just a window around the previous detection could be searched. This will improve speed and provide a more robust method for rejecting outliers.

*** TODO For an additional improvement students should implement outlier rejection and use a low-pass filter to smooth the lane detection over frames, meaning add each new detection to a weighted mean of the position of the lines to avoid jitter.

*** TODO For students who really want to go above and beyond, implement these methods on the challenge videos as well, or on your their own videos they've recorded themselves.
